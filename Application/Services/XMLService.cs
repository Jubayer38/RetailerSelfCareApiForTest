using Domain.Helpers;
using Domain.RequestModel;
using Domain.StaticClass;
using Domain.ViewModel;
using System.Net;
using System.Text;
using System.Xml.Serialization;

namespace Application.Services
{
    public static class XMLService
    {
        internal static string PostXMLData(string destinationUrl, string requestXml)
        {
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(destinationUrl);
            byte[] bytes;
            bytes = Encoding.ASCII.GetBytes(requestXml);
            request.ContentType = "text/xml; encoding='utf-8'";
            request.ContentLength = bytes.Length;
            request.Method = "POST";
            Stream requestStream = request.GetRequestStream();
            requestStream.Write(bytes, 0, bytes.Length);
            requestStream.Close();
            HttpWebResponse response;
            response = (HttpWebResponse)request.GetResponse();

            if (response.StatusCode == HttpStatusCode.OK)
            {
                Stream responseStream = response.GetResponseStream();
                string responseStr = new StreamReader(responseStream).ReadToEnd();
                return responseStr;
            }

            return null;
        }


        internal static object ParseXML(string xmlData, Type type)
        {
            XmlSerializer serializer = new(type);
            object result;
            using (TextReader reader = new StringReader(xmlData))
            {
                result = serializer.Deserialize(reader);
            }
            return result;
        }


        /// <summary>
        /// Get XML Format for ItopUp Request
        /// </summary>
        /// <param name="type">Request Type, should be sent with each request - fixed ex: EXUSRBALREQ </param>
        /// <param name="date">Date and time on which request generated by external transaction server, HH are in 24 Hour Format ex: DD/MM/YYYY HH24:MI:SS</param>
        /// <param name="extnwcode">Network code of the Channel User defined in PreTUPS as External Network code ex: AK</param>
        /// <param name="msisdn">All MSISDN should be in national dial format i.e.with out country code. ex: 9942222</param>
        /// <param name="pin">PIN of the user ex: 123</param>
        /// <param name="loginid">Login ID of the Channel user ex: Mo_cce</param>
        /// <param name="pass">Password of the Channel user ex: 2468</param>
        /// <param name="extcode">Unique external code of the channel user defined in PreTUPS. ex: 123
        /// <param name="extrefnum">Reference number of external system. ex: 12345</param>
        /// <param name="lan">Language Code ex: 1</param>
        /// <returns>XML Format For Request </returns>
        /// string type, string date, string extnwcode, string msisdn, string pin, string loginid, string pass, string extcode, string extrefnum, string lan
        internal static string GetItopUpReqXML(ItopUpXmlRequest xml)
        {
            string reqXML = @"<?xml version=""1.0""?>
                    <!DOCTYPE COMMAND PUBLIC ""-//Ocam//DTD XML Command 1.0//EN"" ""xml/command.dtd"">
                    <COMMAND>
                        <TYPE>" + xml.Type + @"</TYPE>
                        <DATE>" + xml.Date + @"</DATE>
                        <EXTNWCODE>" + xml.Extnwcode + @"</EXTNWCODE>
                        <MSISDN>" + xml.Msisdn + @"</MSISDN>
                        <PIN>" + xml.Pin + @"</PIN>
                        <LOGINID>" + xml.Loginid + @"</LOGINID>
                        <PASSWORD>" + xml.Pass + @"</PASSWORD>
                        <EXTCODE>" + xml.Extcode + @"</EXTCODE>
                        <EXTREFNUM>" + xml.Extrefnum + @"</EXTREFNUM>
                        <MSISDN2>" + xml.Msisdn2 + @"</MSISDN2>
                        <AMOUNT>" + xml.Amount + @"</AMOUNT>
                        <LANGUAGE1>" + xml.Language1 + @"</LANGUAGE1>
                        <LANGUAGE2>" + xml.Language2 + @"</LANGUAGE2>
                        <SELECTOR>" + xml.Selector + @"</SELECTOR>
                    </COMMAND>";
            return reqXML;
        }


        public static string GetItopUpBalReqXML(ItopUpXmlRequest xml)
        {
            string reqXML = @"<?xml version=""1.0""?>
                    <!DOCTYPE COMMAND PUBLIC ""-//Ocam//DTD XML Command 1.0//EN"" ""xml/command.dtd"">
                    <COMMAND>
                        <TYPE>" + xml.Type + @"</TYPE>
                        <DATE>" + xml.Date + @"</DATE>
                        <EXTNWCODE>" + xml.Extnwcode + @"</EXTNWCODE>
                        <MSISDN>" + xml.Msisdn + @"</MSISDN>
                        <PIN>" + xml.Pin + @"</PIN>
                        <LOGINID>" + xml.Loginid + @"</LOGINID>
                        <PASSWORD>" + xml.Pass + @"</PASSWORD>
                        <EXTCODE>" + xml.Extcode + @"</EXTCODE>
                        <EXTREFNUM>" + xml.Extrefnum + @"</EXTREFNUM>
                        <LANGUAGE1>" + xml.Language1 + @"</LANGUAGE1>
                    </COMMAND>";
            return reqXML;
        }


        /// <summary>
        /// Get XML Format for Iris Request
        /// </summary>
        /// <param name="name">Operation Name ex:BEGIN/CONTINUE</param>
        /// <param name="operation">Operation code ex:6001</param>
        /// <param name="mobileNo">Retailer MSISDN with country code ex:8801908421093</param>
        /// <param name="tranId">Transaction ID associated with the transaction ex: 6B925B86428335080B82</param>
        /// <param name="channel">Name of the Channel Interface, If nothing is specified it will be treated as USSD ex: APP/USSD</param>
        /// <param name="userData">User input ex: Options entered by User. (Values separated by *) Below sample is for api level testing, data will be set in case of USSD by default. *USSD_SHORTCODE * SUBSCRIBER_MSISDN *AMOUNT* RETAILER_PIN</param>
        /// <param name="pin">Pin entered by Retailer for the transaction.This parameter will be used only for Begin Operation. ex: 1234</param>
        /// <param name="subscriberNo">Subscriber number for which recharge has been initiated.This parameter will be used only for Begin Operation. ex: 8801986646333 </param>
        /// <param name="pin">Pin entered by Retailer for the transaction.This parameter will be used only for Begin Operation. ex: 1234</param>
        /// <param name="amount">Amount entered by retailer as requested by Susbcriber.This parameter will be used only for Begin Operation. ex: 29 </param>
        /// <returns>XML string</returns>
        internal static string GetIrisReqXML(IrisXMLRequest irisXML)
        {
            string reqXML = @"<?xml version=""1.0""?>
                            <Method>
                                <name>" + irisXML.name + @"</name>
                                <operation>" + irisXML.operationCode + @"</operation>
                                <mobileNo>" + irisXML.mobileNo + @"</mobileNo>
                                <transId>" + irisXML.transId + @"</transId>
                                <channel>" + irisXML.channel + @"</channel>
                                <shortcode>" + irisXML.shortcode + @"</shortcode>
                                <userData>" + irisXML.ussdCode + @"</userData>
                                <pin>" + irisXML.pin + @"</pin>
                                <subscriberNo>" + irisXML.subscriberNo + @"</subscriberNo>
                                <amount>" + irisXML.amount + @"</amount>
                            </Method>";
            return reqXML;
        }


        #region Retailer APP CR 2022

        internal static string PostXMLDataV2(RechargeRequestVM rechargeXmlVM)
        {
            ExternalAPICallVM externalApiVM = new();
            LoggerService loggerService = new();
            externalApiVM.isSuccess = 1;

            try
            {
                HttpWebRequest request = (HttpWebRequest)WebRequest.Create(rechargeXmlVM.RequestUrl);

                byte[] bytes;
                bytes = Encoding.ASCII.GetBytes(rechargeXmlVM.RequestBody);
                request.ContentType = "text/xml; encoding='utf-8'";
                request.ContentLength = bytes.Length;
                request.Method = "POST";

                externalApiVM.reqStartTime = DateTime.Now;
                Stream requestStream = request.GetRequestStream();
                requestStream.Write(bytes, 0, bytes.Length);
                requestStream.Close();

                HttpWebResponse response;
                response = (HttpWebResponse)request.GetResponse();
                externalApiVM.reqEndTime = DateTime.Now;

                Stream responseStream = response.GetResponseStream();
                string responseStr = new StreamReader(responseStream).ReadToEnd();
                externalApiVM.resBodyStr = responseStr;

                return responseStr;
            }
            catch (Exception ex)
            {
                externalApiVM.isSuccess = 0;
                externalApiVM.errorMessage = HelperMethod.ExMsgSubString(ex, "", 500);
                throw;
            }
            finally
            {
                #region====================|SAVE EXTERNAL API LOG|==========================
                externalApiVM.retailerCode = rechargeXmlVM.RetailerCode;
                externalApiVM.methodName = $"{rechargeXmlVM.OriginMethodName} || PostXMLDataV2";
                externalApiVM.reqBodyStr = rechargeXmlVM.RequestBody;

                if (TextLogging.IsEnableRechargeApiExternalLog)
                {
                    externalApiVM.reqEndTime = DateTime.Now;
                    LoggerService.WriteRechargeApiExternalLogInText(externalApiVM, "EvExternalApi");
                }
                #endregion
            }
        }


        internal static string PostTextData(string destinationUrl, string requestXml)
        {
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(destinationUrl);

            byte[] bytes;
            bytes = Encoding.ASCII.GetBytes(requestXml);
            request.ContentType = "text/plain; encoding='utf-8'";
            request.ContentLength = bytes.Length;
            request.Method = "POST";
            Stream requestStream = request.GetRequestStream();
            requestStream.Write(bytes, 0, bytes.Length);
            requestStream.Close();
            HttpWebResponse response;
            response = (HttpWebResponse)request.GetResponse();

            Stream responseStream = response.GetResponseStream();
            string responseStr = new StreamReader(responseStream).ReadToEnd();
            return responseStr;
        }


        /// <summary>
        /// Build XML request body for EV Pin change request
        /// </summary>
        /// <param name="xml"></param>
        /// <returns></returns>
        internal static string GetEvPinChangeReqXML(EvPinChangeXMLRequest xml)
        {
            string reqXML = @"<?xml version=""1.0""?>
                    <!DOCTYPE COMMAND PUBLIC ""-//Ocam//DTD XML Command 1.0//EN"" ""xml/command.dtd"">
                    <COMMAND>
                        <TYPE>" + xml.type + "</TYPE>" +
                        "<DATE></DATE>" +
                        "<EXTNWCODE>" + xml.extnwCode + "</EXTNWCODE>" +
                        "<MSISDN>" + xml.msisdn + "</MSISDN>" +
                        "<OLDPIN>" + xml.oldPin + "</OLDPIN>" +
                        "<NEWPIN>" + xml.newPin + "</NEWPIN>" +
                        "<CONFIRMPIN>" + xml.newPin + "</CONFIRMPIN>" +
                        "<LOGINID></LOGINID>" +
                        "<PASSWORD></PASSWORD>" +
                        "<LANGUAGE1></LANGUAGE1>" +
                        "<EXTREFNUM>" + xml.extrefnum + "</EXTREFNUM>" +
                        "<REMARKS>" + xml.remarks + "</REMARKS>" +
                    "</COMMAND>";

            return reqXML;
        }


        internal static async Task<string> PostXMLDataAsync(string destinationUrl, string requestXml)
        {
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(destinationUrl);

            byte[] bytes;
            bytes = Encoding.ASCII.GetBytes(requestXml);
            request.ContentType = MimeTypes.TextXml;
            request.ContentLength = bytes.Length;
            request.Method = "POST";
            Stream requestStream = await request.GetRequestStreamAsync();
            await requestStream.WriteAsync(bytes);
            requestStream.Close();
            HttpWebResponse response = (HttpWebResponse)await request.GetResponseAsync();

            if (response.StatusCode == HttpStatusCode.OK)
            {
                Stream responseStream = response.GetResponseStream();
                string responseStr = await new StreamReader(responseStream).ReadToEndAsync();
                return responseStr;
            }

            return null;
        }

        #endregion


        #region ==========|   C2C   |==========

        internal static string GetC2CRechrgHistReqXML(C2CRechargeHistReq xml)
        {
            string reqXML = @"<?xml version=""1.0""?>
                            <!DOCTYPE COMMAND PUBLIC ""-//Ocam//DTD XML Command 1.0//EN"" ""xml/command.dtd"">
                            <COMMAND>
                                <TYPE>" + xml.Type + @"</TYPE>
                                <DATE>" + xml.Date + @"</DATE>
                                <EXTNWCODE>" + xml.Extnwcode + @"</EXTNWCODE>
                                <MSISDN></MSISDN>
                                <PIN></PIN>
                                <LOGINID></LOGINID>
                                <PASSWORD></PASSWORD>
                                <EXTCODE>" + xml.Extcode + @"</EXTCODE>
                                <EXTREFNUM>" + xml.Extrefnum + @"</EXTREFNUM>
                                <LANGUAGE1>" + xml.Language1 + @"</LANGUAGE1>
                                <NUMBER_OF_LAST_X_TXN>" + xml.NumberOfLastXTxn + @"</NUMBER_OF_LAST_X_TXN>
                                <RECEIVER_MSISDN>" + xml.Receiver_Msisdn + @"</RECEIVER_MSISDN>
                            </COMMAND>";
            return reqXML;
        }

        #endregion ==========|   C2C   |==========

    }
}
